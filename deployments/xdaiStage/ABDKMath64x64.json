{
  "address": "0x961dBfbBf7C6cb802754C298da70c24FDd97119f",
  "abi": [],
  "transactionHash": "0x1270707943dfeffe58a90dbf8621e976e303c4f077afc0aa69009885213fe1e1",
  "receipt": {
    "to": null,
    "from": "0xA2F2078006658594Fa058Ee8dBD08f3AA2Bb6C9c",
    "contractAddress": "0x961dBfbBf7C6cb802754C298da70c24FDd97119f",
    "transactionIndex": 4,
    "gasUsed": "72227",
    "logsBloom": "0x
    "blockHash": "0x448a66e6ce5fe145fcf3ecc1d574ab24f5b9c20eb063d7dae0a97981552f1088",
    "transactionHash": "0x1270707943dfeffe58a90dbf8621e976e303c4f077afc0aa69009885213fe1e1",
    "logs": [],
    "blockNumber": 30486556,
    "cumulativeGasUsed": "15185605",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b1c7bcf5e8b291fa6a4245de9495ee46",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Smart contract library of mathematical functions operating with signed 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is basically a simple fraction whose numerator is signed 128-bit integer and denominator is 2^64.  As long as denominator is always the same, there is no need to store it, thus in Solidity signed 64.64-bit fixed point numbers are represented by int128 type holding only the numerator.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/ABDKMath64x64.sol\":\"ABDKMath64x64\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":300},\"remappings\":[]},\"sources\":{\"contracts/libraries/ABDKMath64x64.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * Smart contract library of mathematical functions operating with signed\\r\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\r\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\r\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\r\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\r\\n * represented by int128 type holding only the numerator.\\r\\n */\\r\\nlibrary ABDKMath64x64 {\\r\\n    /*\\r\\n     * Minimum value signed 64.64-bit fixed point number may have.\\r\\n     */\\r\\n    int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\r\\n\\r\\n    /*\\r\\n     * Maximum value signed 64.64-bit fixed point number may have.\\r\\n     */\\r\\n    int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\r\\n\\r\\n    /**\\r\\n     * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\r\\n     * number.  Revert on overflow.\\r\\n     *\\r\\n     * @param x signed 256-bit integer number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n    function fromInt (int256 x) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n        require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\r\\n        return int128 (x << 64);\\r\\n    }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Convert signed 64.64 fixed point number into signed 64-bit integer number\\r\\n     * rounding down.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64-bit integer number\\r\\n   */\\r\\n    function toInt (int128 x) internal pure returns (int64) {\\r\\n    unchecked {\\r\\n        return int64 (x >> 64);\\r\\n    }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\r\\n     * number.  Revert on overflow.\\r\\n     *\\r\\n     * @param x unsigned 256-bit integer number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n    function fromUInt (uint256 x) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n        require (x <= 0x7FFFFFFFFFFFFFFF);\\r\\n        return int128 (int256 (x << 64));\\r\\n    }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\r\\n     * number rounding down.  Revert on underflow.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n   * @return unsigned 64-bit integer number\\r\\n   */\\r\\n    function toUInt (int128 x) internal pure returns (uint64) {\\r\\n    unchecked {\\r\\n        require (x >= 0);\\r\\n        return uint64 (uint128 (x >> 64));\\r\\n    }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\r\\n     * number rounding down.  Revert on overflow.\\r\\n     *\\r\\n     * @param x signed 128.128-bin fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n    function from128x128 (int256 x) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n        int256 result = x >> 64;\\r\\n        require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n        return int128 (result);\\r\\n    }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\r\\n     * number.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 128.128 fixed point number\\r\\n   */\\r\\n    function to128x128 (int128 x) internal pure returns (int256) {\\r\\n    unchecked {\\r\\n        return int256 (x) << 64;\\r\\n    }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate x + y.  Revert on overflow.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n    function add (int128 x, int128 y) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n        int256 result = int256(x) + y;\\r\\n        require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n        return int128 (result);\\r\\n    }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate x - y.  Revert on overflow.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n    function sub (int128 x, int128 y) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n        int256 result = int256(x) - y;\\r\\n        require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n        return int128 (result);\\r\\n    }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate x * y rounding down.  Revert on overflow.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n    function mul (int128 x, int128 y) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n        int256 result = int256(x) * y >> 64;\\r\\n        require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n        return int128 (result);\\r\\n    }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\r\\n     * number and y is signed 256-bit integer number.  Revert on overflow.\\r\\n     *\\r\\n     * @param x signed 64.64 fixed point number\\r\\n   * @param y signed 256-bit integer number\\r\\n   * @return signed 256-bit integer number\\r\\n   */\\r\\n    function muli (int128 x, int256 y) internal pure returns (int256) {\\r\\n    unchecked {\\r\\n        if (x == MIN_64x64) {\\r\\n            require (y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\\r\\n            y <= 0x1000000000000000000000000000000000000000000000000);\\r\\n            return -y << 63;\\r\\n        } else {\\r\\n            bool negativeResult = false;\\r\\n            if (x < 0) {\\r\\n                x = -x;\\r\\n                negativeResult = true;\\r\\n            }\\r\\n            if (y < 0) {\\r\\n                y = -y; // We rely on overflow behavior here\\r\\n                negativeResult = !negativeResult;\\r\\n            }\\r\\n            uint256 absoluteResult = mulu (x, uint256 (y));\\r\\n            if (negativeResult) {\\r\\n                require (absoluteResult <=\\r\\n                    0x8000000000000000000000000000000000000000000000000000000000000000);\\r\\n                return -int256 (absoluteResult); // We rely on overflow behavior here\\r\\n            } else {\\r\\n                require (absoluteResult <=\\r\\n                    0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n                return int256 (absoluteResult);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\r\\n     * and y is unsigned 256-bit integer number.  Revert on overflow.\\r\\n     *\\r\\n     * @param x signed 64.64 fixed point number\\r\\n   * @param y unsigned 256-bit integer number\\r\\n   * @return unsigned 256-bit integer number\\r\\n   */\\r\\n    function mulu (int128 x, uint256 y) internal pure returns (uint256) {\\r\\n    unchecked {\\r\\n        if (y == 0) return 0;\\r\\n\\r\\n        require (x >= 0);\\r\\n\\r\\n        uint256 lo = (uint256 (int256 (x)) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\r\\n        uint256 hi = uint256 (int256 (x)) * (y >> 128);\\r\\n\\r\\n        require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n        hi <<= 64;\\r\\n\\r\\n        require (hi <=\\r\\n            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\\r\\n        return hi + lo;\\r\\n    }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\r\\n     * zero.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n    function div (int128 x, int128 y) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n        require (y != 0);\\r\\n        int256 result = (int256 (x) << 64) / y;\\r\\n        require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n        return int128 (result);\\r\\n    }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\r\\n     * integer numbers.  Revert on overflow or when y is zero.\\r\\n     *\\r\\n     * @param x signed 256-bit integer number\\r\\n   * @param y signed 256-bit integer number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n    function divi (int256 x, int256 y) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n        require (y != 0);\\r\\n\\r\\n        bool negativeResult = false;\\r\\n        if (x < 0) {\\r\\n            x = -x; // We rely on overflow behavior here\\r\\n            negativeResult = true;\\r\\n        }\\r\\n        if (y < 0) {\\r\\n            y = -y; // We rely on overflow behavior here\\r\\n            negativeResult = !negativeResult;\\r\\n        }\\r\\n        uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\\r\\n        if (negativeResult) {\\r\\n            require (absoluteResult <= 0x80000000000000000000000000000000);\\r\\n            return -int128 (absoluteResult); // We rely on overflow behavior here\\r\\n        } else {\\r\\n            require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n            return int128 (absoluteResult); // We rely on overflow behavior here\\r\\n        }\\r\\n    }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\r\\n     * integer numbers.  Revert on overflow or when y is zero.\\r\\n     *\\r\\n     * @param x unsigned 256-bit integer number\\r\\n   * @param y unsigned 256-bit integer number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n    function divu (uint256 x, uint256 y) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n        require (y != 0);\\r\\n        uint128 result = divuu (x, y);\\r\\n        require (result <= uint128 (MAX_64x64));\\r\\n        return int128 (result);\\r\\n    }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate -x.  Revert on overflow.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n    function neg (int128 x) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n        require (x != MIN_64x64);\\r\\n        return -x;\\r\\n    }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate |x|.  Revert on overflow.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n    function abs (int128 x) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n        require (x != MIN_64x64);\\r\\n        return x < 0 ? -x : x;\\r\\n    }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\r\\n     * zero.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n    function inv (int128 x) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n        require (x != 0);\\r\\n        int256 result = int256 (0x100000000000000000000000000000000) / x;\\r\\n        require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n        return int128 (result);\\r\\n    }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n    function avg (int128 x, int128 y) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n        return int128 ((int256 (x) + int256 (y)) >> 1);\\r\\n    }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\r\\n     * Revert on overflow or in case x * y is negative.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n    function gavg (int128 x, int128 y) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n        int256 m = int256 (x) * int256 (y);\\r\\n        require (m >= 0);\\r\\n        require (m <\\r\\n            0x4000000000000000000000000000000000000000000000000000000000000000);\\r\\n        return int128 (sqrtu (uint256 (m)));\\r\\n    }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\r\\n     * and y is unsigned 256-bit integer number.  Revert on overflow.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n   * @param y uint256 value\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n    function pow (int128 x, uint256 y) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n        bool negative = x < 0 && y & 1 == 1;\\r\\n\\r\\n        uint256 absX = uint128 (x < 0 ? -x : x);\\r\\n        uint256 absResult;\\r\\n        absResult = 0x100000000000000000000000000000000;\\r\\n\\r\\n        if (absX <= 0x10000000000000000) {\\r\\n            absX <<= 63;\\r\\n            while (y != 0) {\\r\\n                if (y & 0x1 != 0) {\\r\\n                    absResult = absResult * absX >> 127;\\r\\n                }\\r\\n                absX = absX * absX >> 127;\\r\\n\\r\\n                if (y & 0x2 != 0) {\\r\\n                    absResult = absResult * absX >> 127;\\r\\n                }\\r\\n                absX = absX * absX >> 127;\\r\\n\\r\\n                if (y & 0x4 != 0) {\\r\\n                    absResult = absResult * absX >> 127;\\r\\n                }\\r\\n                absX = absX * absX >> 127;\\r\\n\\r\\n                if (y & 0x8 != 0) {\\r\\n                    absResult = absResult * absX >> 127;\\r\\n                }\\r\\n                absX = absX * absX >> 127;\\r\\n\\r\\n                y >>= 4;\\r\\n            }\\r\\n\\r\\n            absResult >>= 64;\\r\\n        } else {\\r\\n            uint256 absXShift = 63;\\r\\n            if (absX < 0x1000000000000000000000000) { absX <<= 32; absXShift -= 32; }\\r\\n            if (absX < 0x10000000000000000000000000000) { absX <<= 16; absXShift -= 16; }\\r\\n            if (absX < 0x1000000000000000000000000000000) { absX <<= 8; absXShift -= 8; }\\r\\n            if (absX < 0x10000000000000000000000000000000) { absX <<= 4; absXShift -= 4; }\\r\\n            if (absX < 0x40000000000000000000000000000000) { absX <<= 2; absXShift -= 2; }\\r\\n            if (absX < 0x80000000000000000000000000000000) { absX <<= 1; absXShift -= 1; }\\r\\n\\r\\n            uint256 resultShift = 0;\\r\\n            while (y != 0) {\\r\\n                require (absXShift < 64);\\r\\n\\r\\n                if (y & 0x1 != 0) {\\r\\n                    absResult = absResult * absX >> 127;\\r\\n                    resultShift += absXShift;\\r\\n                    if (absResult > 0x100000000000000000000000000000000) {\\r\\n                        absResult >>= 1;\\r\\n                        resultShift += 1;\\r\\n                    }\\r\\n                }\\r\\n                absX = absX * absX >> 127;\\r\\n                absXShift <<= 1;\\r\\n                if (absX >= 0x100000000000000000000000000000000) {\\r\\n                    absX >>= 1;\\r\\n                    absXShift += 1;\\r\\n                }\\r\\n\\r\\n                y >>= 1;\\r\\n            }\\r\\n\\r\\n            require (resultShift < 64);\\r\\n            absResult >>= 64 - resultShift;\\r\\n        }\\r\\n        int256 result = negative ? -int256 (absResult) : int256 (absResult);\\r\\n        require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n        return int128 (result);\\r\\n    }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate sqrt (x) rounding down.  Revert if x < 0.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n    function sqrt (int128 x) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n        require (x >= 0);\\r\\n        return int128 (sqrtu (uint256 (int256 (x)) << 64));\\r\\n    }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate binary logarithm of x.  Revert if x <= 0.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n    function log_2 (int128 x) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n        require (x > 0);\\r\\n\\r\\n        int256 msb = 0;\\r\\n        int256 xc = x;\\r\\n        if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\\r\\n        if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\r\\n        if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\r\\n        if (xc >= 0x100) { xc >>= 8; msb += 8; }\\r\\n        if (xc >= 0x10) { xc >>= 4; msb += 4; }\\r\\n        if (xc >= 0x4) { xc >>= 2; msb += 2; }\\r\\n        if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\r\\n\\r\\n        int256 result = msb - 64 << 64;\\r\\n        uint256 ux = uint256 (int256 (x)) << uint256 (127 - msb);\\r\\n        for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\r\\n            ux *= ux;\\r\\n            uint256 b = ux >> 255;\\r\\n            ux >>= 127 + b;\\r\\n            result += bit * int256 (b);\\r\\n        }\\r\\n\\r\\n        return int128 (result);\\r\\n    }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate natural logarithm of x.  Revert if x <= 0.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n    function ln (int128 x) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n        require (x > 0);\\r\\n\\r\\n        return int128 (int256 (\\r\\n                uint256 (int256 (log_2 (x))) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128));\\r\\n    }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate binary exponent of x.  Revert on overflow.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n    function exp_2 (int128 x) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n        require (x < 0x400000000000000000); // Overflow\\r\\n\\r\\n        if (x < -0x400000000000000000) return 0; // Underflow\\r\\n\\r\\n        uint256 result = 0x80000000000000000000000000000000;\\r\\n\\r\\n        if (x & 0x8000000000000000 > 0)\\r\\n            result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\\r\\n        if (x & 0x4000000000000000 > 0)\\r\\n            result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\\r\\n        if (x & 0x2000000000000000 > 0)\\r\\n            result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\\r\\n        if (x & 0x1000000000000000 > 0)\\r\\n            result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\\r\\n        if (x & 0x800000000000000 > 0)\\r\\n            result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\\r\\n        if (x & 0x400000000000000 > 0)\\r\\n            result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\\r\\n        if (x & 0x200000000000000 > 0)\\r\\n            result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\\r\\n        if (x & 0x100000000000000 > 0)\\r\\n            result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\\r\\n        if (x & 0x80000000000000 > 0)\\r\\n            result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\\r\\n        if (x & 0x40000000000000 > 0)\\r\\n            result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\\r\\n        if (x & 0x20000000000000 > 0)\\r\\n            result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\\r\\n        if (x & 0x10000000000000 > 0)\\r\\n            result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\\r\\n        if (x & 0x8000000000000 > 0)\\r\\n            result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\\r\\n        if (x & 0x4000000000000 > 0)\\r\\n            result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\\r\\n        if (x & 0x2000000000000 > 0)\\r\\n            result = result * 0x1000162E525EE054754457D5995292026 >> 128;\\r\\n        if (x & 0x1000000000000 > 0)\\r\\n            result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\\r\\n        if (x & 0x800000000000 > 0)\\r\\n            result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\\r\\n        if (x & 0x400000000000 > 0)\\r\\n            result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\\r\\n        if (x & 0x200000000000 > 0)\\r\\n            result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\\r\\n        if (x & 0x100000000000 > 0)\\r\\n            result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\\r\\n        if (x & 0x80000000000 > 0)\\r\\n            result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\\r\\n        if (x & 0x40000000000 > 0)\\r\\n            result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\\r\\n        if (x & 0x20000000000 > 0)\\r\\n            result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\\r\\n        if (x & 0x10000000000 > 0)\\r\\n            result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\\r\\n        if (x & 0x8000000000 > 0)\\r\\n            result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\\r\\n        if (x & 0x4000000000 > 0)\\r\\n            result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\\r\\n        if (x & 0x2000000000 > 0)\\r\\n            result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\\r\\n        if (x & 0x1000000000 > 0)\\r\\n            result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\\r\\n        if (x & 0x800000000 > 0)\\r\\n            result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\\r\\n        if (x & 0x400000000 > 0)\\r\\n            result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\\r\\n        if (x & 0x200000000 > 0)\\r\\n            result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\\r\\n        if (x & 0x100000000 > 0)\\r\\n            result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\\r\\n        if (x & 0x80000000 > 0)\\r\\n            result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\\r\\n        if (x & 0x40000000 > 0)\\r\\n            result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\\r\\n        if (x & 0x20000000 > 0)\\r\\n            result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\\r\\n        if (x & 0x10000000 > 0)\\r\\n            result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\\r\\n        if (x & 0x8000000 > 0)\\r\\n            result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\\r\\n        if (x & 0x4000000 > 0)\\r\\n            result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\\r\\n        if (x & 0x2000000 > 0)\\r\\n            result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\\r\\n        if (x & 0x1000000 > 0)\\r\\n            result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\\r\\n        if (x & 0x800000 > 0)\\r\\n            result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\\r\\n        if (x & 0x400000 > 0)\\r\\n            result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\\r\\n        if (x & 0x200000 > 0)\\r\\n            result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\\r\\n        if (x & 0x100000 > 0)\\r\\n            result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\\r\\n        if (x & 0x80000 > 0)\\r\\n            result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\\r\\n        if (x & 0x40000 > 0)\\r\\n            result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\\r\\n        if (x & 0x20000 > 0)\\r\\n            result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\\r\\n        if (x & 0x10000 > 0)\\r\\n            result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\\r\\n        if (x & 0x8000 > 0)\\r\\n            result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\\r\\n        if (x & 0x4000 > 0)\\r\\n            result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\\r\\n        if (x & 0x2000 > 0)\\r\\n            result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\\r\\n        if (x & 0x1000 > 0)\\r\\n            result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\\r\\n        if (x & 0x800 > 0)\\r\\n            result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\\r\\n        if (x & 0x400 > 0)\\r\\n            result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\\r\\n        if (x & 0x200 > 0)\\r\\n            result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\\r\\n        if (x & 0x100 > 0)\\r\\n            result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\\r\\n        if (x & 0x80 > 0)\\r\\n            result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\\r\\n        if (x & 0x40 > 0)\\r\\n            result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\\r\\n        if (x & 0x20 > 0)\\r\\n            result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\\r\\n        if (x & 0x10 > 0)\\r\\n            result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\\r\\n        if (x & 0x8 > 0)\\r\\n            result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\\r\\n        if (x & 0x4 > 0)\\r\\n            result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\\r\\n        if (x & 0x2 > 0)\\r\\n            result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\\r\\n        if (x & 0x1 > 0)\\r\\n            result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\\r\\n\\r\\n        result >>= uint256 (int256 (63 - (x >> 64)));\\r\\n        require (result <= uint256 (int256 (MAX_64x64)));\\r\\n\\r\\n        return int128 (int256 (result));\\r\\n    }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate natural exponent of x.  Revert on overflow.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n    function exp (int128 x) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n        require (x < 0x400000000000000000); // Overflow\\r\\n\\r\\n        if (x < -0x400000000000000000) return 0; // Underflow\\r\\n\\r\\n        return exp_2 (\\r\\n            int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\\r\\n    }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\r\\n     * integer numbers.  Revert on overflow or when y is zero.\\r\\n     *\\r\\n     * @param x unsigned 256-bit integer number\\r\\n   * @param y unsigned 256-bit integer number\\r\\n   * @return unsigned 64.64-bit fixed point number\\r\\n   */\\r\\n    function divuu (uint256 x, uint256 y) private pure returns (uint128) {\\r\\n    unchecked {\\r\\n        require (y != 0);\\r\\n\\r\\n        uint256 result;\\r\\n\\r\\n        if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\r\\n            result = (x << 64) / y;\\r\\n        else {\\r\\n            uint256 msb = 192;\\r\\n            uint256 xc = x >> 192;\\r\\n            if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\r\\n            if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\r\\n            if (xc >= 0x100) { xc >>= 8; msb += 8; }\\r\\n            if (xc >= 0x10) { xc >>= 4; msb += 4; }\\r\\n            if (xc >= 0x4) { xc >>= 2; msb += 2; }\\r\\n            if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\r\\n\\r\\n            result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\\r\\n            require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n\\r\\n            uint256 hi = result * (y >> 128);\\r\\n            uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n\\r\\n            uint256 xh = x >> 192;\\r\\n            uint256 xl = x << 64;\\r\\n\\r\\n            if (xl < lo) xh -= 1;\\r\\n            xl -= lo; // We rely on overflow behavior here\\r\\n            lo = hi << 128;\\r\\n            if (xl < lo) xh -= 1;\\r\\n            xl -= lo; // We rely on overflow behavior here\\r\\n\\r\\n            assert (xh == hi >> 128);\\r\\n\\r\\n            result += xl / y;\\r\\n        }\\r\\n\\r\\n        require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n        return uint128 (result);\\r\\n    }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\r\\n     * number.\\r\\n     *\\r\\n     * @param x unsigned 256-bit integer number\\r\\n   * @return unsigned 128-bit integer number\\r\\n   */\\r\\n    function sqrtu (uint256 x) private pure returns (uint128) {\\r\\n    unchecked {\\r\\n        if (x == 0) return 0;\\r\\n        else {\\r\\n            uint256 xx = x;\\r\\n            uint256 r = 1;\\r\\n            if (xx >= 0x100000000000000000000000000000000) { xx >>= 128; r <<= 64; }\\r\\n            if (xx >= 0x10000000000000000) { xx >>= 64; r <<= 32; }\\r\\n            if (xx >= 0x100000000) { xx >>= 32; r <<= 16; }\\r\\n            if (xx >= 0x10000) { xx >>= 16; r <<= 8; }\\r\\n            if (xx >= 0x100) { xx >>= 8; r <<= 4; }\\r\\n            if (xx >= 0x10) { xx >>= 4; r <<= 2; }\\r\\n            if (xx >= 0x8) { r <<= 1; }\\r\\n            r = (r + x / r) >> 1;\\r\\n            r = (r + x / r) >> 1;\\r\\n            r = (r + x / r) >> 1;\\r\\n            r = (r + x / r) >> 1;\\r\\n            r = (r + x / r) >> 1;\\r\\n            r = (r + x / r) >> 1;\\r\\n            r = (r + x / r) >> 1; // Seven iterations should be enough\\r\\n            uint256 r1 = x / r;\\r\\n            return uint128 (r < r1 ? r : r1);\\r\\n        }\\r\\n    }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb0bd6c7776723f29bcd4c3d62bad44ed06279af5f52fe0810ce2219cd1097bf5\"}},\"version\":1}",
  "bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201152733b017d3e2ad3360ad15a51eb02b633860f5beaf3b94c29a57a558ec0a064736f6c63430008100033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201152733b017d3e2ad3360ad15a51eb02b633860f5beaf3b94c29a57a558ec0a064736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Smart contract library of mathematical functions operating with signed 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is basically a simple fraction whose numerator is signed 128-bit integer and denominator is 2^64.  As long as denominator is always the same, there is no need to store it, thus in Solidity signed 64.64-bit fixed point numbers are represented by int128 type holding only the numerator.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}