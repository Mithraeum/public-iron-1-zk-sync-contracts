{
  "address": "0x9324458f84CF2A426BAa5FE512300dFcD7013F5F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "uri_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct Banners.Part[16]",
          "name": "parts",
          "type": "tuple[16]"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "BannerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct Banners.Part[16]",
          "name": "parts",
          "type": "tuple[16]"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "NewBanner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bannerData",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenIndex",
          "type": "uint256"
        }
      ],
      "name": "getBannerData",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct Banners.Part[16]",
          "name": "parts",
          "type": "tuple[16]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holderAddress",
          "type": "address"
        }
      ],
      "name": "getBannerDataByUserBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Banners.Part[16]",
              "name": "parts",
              "type": "tuple[16]"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Banners.BannerData[]",
          "name": "bannersData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct Banners.Part[16]",
          "name": "parts",
          "type": "tuple[16]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct Banners.Part[16]",
          "name": "parts",
          "type": "tuple[16]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "updateBanner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "updateURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x965c33c0610d1e06b6cba5b1e3dc2ee8d236e060b7068ac3b0002f606d0d192b",
  "receipt": {
    "to": null,
    "from": "0xA2F2078006658594Fa058Ee8dBD08f3AA2Bb6C9c",
    "contractAddress": "0x9324458f84CF2A426BAa5FE512300dFcD7013F5F",
    "transactionIndex": 0,
    "gasUsed": "2948346",
    "logsBloom": "0x
    "blockHash": "0x7e82291247c81f3e76bd14bf4036ed1d5680b81c36bd2e6db6adc4468d909e65",
    "transactionHash": "0x965c33c0610d1e06b6cba5b1e3dc2ee8d236e060b7068ac3b0002f606d0d192b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 154242231,
        "transactionHash": "0x965c33c0610d1e06b6cba5b1e3dc2ee8d236e060b7068ac3b0002f606d0d192b",
        "address": "0x9324458f84CF2A426BAa5FE512300dFcD7013F5F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a2f2078006658594fa058ee8dbd08f3aa2bb6c9c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x7e82291247c81f3e76bd14bf4036ed1d5680b81c36bd2e6db6adc4468d909e65"
      }
    ],
    "blockNumber": 154242231,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Banners",
    "BNR",
    "https://mit-flags-node.s3.eu-central-1.amazonaws.com/skaleChaos/1313161555/json/"
  ],
  "numDeployments": 1,
  "solcInputHash": "d40fd766cc3fa0d4c836779e74bc4f2f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Banners.Part[16]\",\"name\":\"parts\",\"type\":\"tuple[16]\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"BannerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Banners.Part[16]\",\"name\":\"parts\",\"type\":\"tuple[16]\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"NewBanner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bannerData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"}],\"name\":\"getBannerData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct Banners.Part[16]\",\"name\":\"parts\",\"type\":\"tuple[16]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holderAddress\",\"type\":\"address\"}],\"name\":\"getBannerDataByUserBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct Banners.Part[16]\",\"name\":\"parts\",\"type\":\"tuple[16]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Banners.BannerData[]\",\"name\":\"bannersData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct Banners.Part[16]\",\"name\":\"parts\",\"type\":\"tuple[16]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct Banners.Part[16]\",\"name\":\"parts\",\"type\":\"tuple[16]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"updateBanner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"updateURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"BannerUpdated(uint256,string,(address,uint256)[16],bytes)\":{\"params\":{\"data\":\"New banner custom parameters\",\"name\":\"New banner name\",\"parts\":\"New parts struct\",\"tokenIndex\":\"Token id which was updated\"}},\"NewBanner(uint256,string,(address,uint256)[16],bytes)\":{\"params\":{\"data\":\"Banner custom parameters\",\"name\":\"Banner name\",\"parts\":\"Parts struct\",\"tokenIndex\":\"Newly created token id\"}}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getBannerData(uint256)\":{\"details\":\"Default mapping read method does not return all data\",\"params\":{\"tokenIndex\":\"Token index\"},\"returns\":{\"data\":\"Banner data\",\"name\":\"Banner name\",\"parts\":\"Banner parts\"}},\"getBannerDataByUserBatch(address)\":{\"details\":\"Used to query all nfts with their data without asking them one by one (may not work for holder with very large amount of nfts)\",\"params\":{\"holderAddress\":\"Holder address\"},\"returns\":{\"bannersData\":\"Banner data for every token id\",\"tokenIds\":\"Token ids holder owns\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mint(string,(address,uint256)[16],bytes)\":{\"details\":\"Specified banner parts will be taken from msg.sender\",\"params\":{\"data\":\"Banner custom parameters\",\"name\":\"Banner name\",\"parts\":\"Banner parts\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"ids\":\"An array containing ids of each token being transferred (order and length must match values array)\",\"operator\":\"The address which initiated the batch transfer (i.e. msg.sender)\",\"values\":\"An array containing amounts of each token being transferred (order and length must match ids array)\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"id\":\"The ID of the token being transferred\",\"operator\":\"The address which initiated the transfer (i.e. msg.sender)\",\"value\":\"The amount of tokens being transferred\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateBanner(uint256,string,(address,uint256)[16],bytes)\":{\"params\":{\"data\":\"Banner custom parameters\",\"name\":\"New banner name\",\"parts\":\"New banner parts\",\"tokenId\":\"banner token id which will be updated, old banner parts, if replaced, will be refunded to the owner\"}},\"updateURI(string)\":{\"details\":\"Only owner can modify base token uri\"}},\"stateVariables\":{\"bannerData\":{\"details\":\"Updated when #updateBanner or #mint is called\"},\"baseURI\":{\"details\":\"Updated on creation or when #updateURI is called\"},\"lastTokenId\":{\"details\":\"Updated when #mint is called\"}},\"title\":\"Banners Nft\",\"version\":1},\"userdoc\":{\"events\":{\"BannerUpdated(uint256,string,(address,uint256)[16],bytes)\":{\"notice\":\"Emitted when #updateBanner is called\"},\"NewBanner(uint256,string,(address,uint256)[16],bytes)\":{\"notice\":\"Emitted when #mint is called\"}},\"kind\":\"user\",\"methods\":{\"bannerData(uint256)\":{\"notice\":\"Mapping containing banner data by provided token id\"},\"baseURI()\":{\"notice\":\"Base URI for computing token uri\"},\"getBannerData(uint256)\":{\"notice\":\"Returns banner data with parts\"},\"getBannerDataByUserBatch(address)\":{\"notice\":\"Returns all nfts with their banner data for specified holder address\"},\"lastTokenId()\":{\"notice\":\"Last created token id\"},\"mint(string,(address,uint256)[16],bytes)\":{\"notice\":\"Mints banner with specified parameters\"},\"updateBanner(uint256,string,(address,uint256)[16],bytes)\":{\"notice\":\"Updates banner with specified parameters\"},\"updateURI(string)\":{\"notice\":\"Updates base token uri\"}},\"notice\":\"Acts as ERC721 Nft token, which supports ERC721 and ERC1155 parts as properties of every banner nft\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/banners/Banners.sol\":\"Banners\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":300},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/banners/Banners.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\\\";\\r\\n\\r\\n/// @title Banners Nft\\r\\n/// @notice Acts as ERC721 Nft token, which supports ERC721 and ERC1155 parts as properties of every banner nft\\r\\ncontract Banners is ERC721Enumerable, Ownable, ERC1155Receiver {\\r\\n    struct Part {\\r\\n        address addr;\\r\\n        uint256 id;\\r\\n    }\\r\\n\\r\\n    struct BannerData {\\r\\n        string name;\\r\\n        Part[16] parts;\\r\\n        bytes data;\\r\\n    }\\r\\n\\r\\n    /// @notice Mapping containing banner data by provided token id\\r\\n    /// @dev Updated when #updateBanner or #mint is called\\r\\n    mapping(uint256 => BannerData) public bannerData;\\r\\n\\r\\n    /// @notice Base URI for computing token uri\\r\\n    /// @dev Updated on creation or when #updateURI is called\\r\\n    string public baseURI;\\r\\n\\r\\n    /// @notice Last created token id\\r\\n    /// @dev Updated when #mint is called\\r\\n    uint256 public lastTokenId = 0;\\r\\n\\r\\n    /// @notice Emitted when #mint is called\\r\\n    /// @param tokenIndex Newly created token id\\r\\n    /// @param name Banner name\\r\\n    /// @param parts Parts struct\\r\\n    /// @param data Banner custom parameters\\r\\n    event NewBanner(uint256 tokenIndex, string name, Part[16] parts, bytes data);\\r\\n\\r\\n    /// @notice Emitted when #updateBanner is called\\r\\n    /// @param tokenIndex Token id which was updated\\r\\n    /// @param name New banner name\\r\\n    /// @param parts New parts struct\\r\\n    /// @param data New banner custom parameters\\r\\n    event BannerUpdated(uint256 tokenIndex, string name, Part[16] parts, bytes data);\\r\\n\\r\\n    constructor(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        string memory uri_\\r\\n    ) ERC721(name_, symbol_) {\\r\\n        baseURI = uri_;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IERC165\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override(ERC721Enumerable, ERC1155Receiver)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return ERC721Enumerable.supportsInterface(interfaceId) || ERC1155Receiver.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /// @dev Overridden value from ERC721\\r\\n    function _baseURI() internal view override returns (string memory) {\\r\\n        return baseURI;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IERC1155Receiver\\r\\n    function onERC1155Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 id,\\r\\n        uint256 value,\\r\\n        bytes calldata data\\r\\n    ) external override returns (bytes4) {\\r\\n        return IERC1155Receiver.onERC1155Received.selector;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IERC1155Receiver\\r\\n    function onERC1155BatchReceived(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256[] calldata ids,\\r\\n        uint256[] calldata values,\\r\\n        bytes calldata data\\r\\n    ) external override returns (bytes4) {\\r\\n        return IERC1155Receiver.onERC1155BatchReceived.selector;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns banner data with parts\\r\\n    /// @dev Default mapping read method does not return all data\\r\\n    /// @param tokenIndex Token index\\r\\n    /// @return name Banner name\\r\\n    /// @return parts Banner parts\\r\\n    /// @return data Banner data\\r\\n    function getBannerData(uint256 tokenIndex)\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            string memory name,\\r\\n            Part[16] memory parts,\\r\\n            bytes memory data\\r\\n        )\\r\\n    {\\r\\n        return (bannerData[tokenIndex].name, bannerData[tokenIndex].parts, bannerData[tokenIndex].data);\\r\\n    }\\r\\n\\r\\n    /// @notice Returns all nfts with their banner data for specified holder address\\r\\n    /// @dev Used to query all nfts with their data without asking them one by one (may not work for holder with very large amount of nfts)\\r\\n    /// @param holderAddress Holder address\\r\\n    /// @return tokenIds Token ids holder owns\\r\\n    /// @return bannersData Banner data for every token id\\r\\n    function getBannerDataByUserBatch(address holderAddress)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256[] memory tokenIds, BannerData[] memory bannersData)\\r\\n    {\\r\\n        uint256 userBalance = balanceOf(holderAddress);\\r\\n\\r\\n        bannersData = new BannerData[](userBalance);\\r\\n        tokenIds = new uint256[](userBalance);\\r\\n\\r\\n        for (uint256 i = 0; i < userBalance; i++) {\\r\\n            uint256 tokenId = tokenOfOwnerByIndex(holderAddress, i);\\r\\n            tokenIds[i] = tokenId;\\r\\n            bannersData[i] = bannerData[tokenId];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Updates base token uri\\r\\n    /// @dev Only owner can modify base token uri\\r\\n    function updateURI(string memory _uri) public onlyOwner {\\r\\n        baseURI = _uri;\\r\\n    }\\r\\n\\r\\n    /// @notice Mints banner with specified parameters\\r\\n    /// @dev Specified banner parts will be taken from msg.sender\\r\\n    /// @param name Banner name\\r\\n    /// @param parts Banner parts\\r\\n    /// @param data Banner custom parameters\\r\\n    function mint(\\r\\n        string calldata name,\\r\\n        Part[16] memory parts,\\r\\n        bytes memory data\\r\\n    ) public {\\r\\n        lastTokenId++;\\r\\n\\r\\n        bannerData[lastTokenId].name = name;\\r\\n        bannerData[lastTokenId].data = data;\\r\\n        addParts(lastTokenId, parts);\\r\\n\\r\\n        _safeMint(msg.sender, lastTokenId, data);\\r\\n\\r\\n        emit NewBanner(lastTokenId, name, parts, data);\\r\\n    }\\r\\n\\r\\n    /// @dev Transfers specified banner parts from msg.sender to this contract\\r\\n    function addParts(uint256 tokenId, Part[16] memory parts) internal {\\r\\n        for (uint256 i = 0; i < parts.length; i++) {\\r\\n            if (parts[i].addr == address(0)) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            //try 721\\r\\n\\r\\n            try IERC721(parts[i].addr).safeTransferFrom(msg.sender, address(this), parts[i].id) {} catch (\\r\\n                bytes memory /*lowLevelData*/\\r\\n            ) {\\r\\n                IERC1155(parts[i].addr).safeTransferFrom(msg.sender, address(this), parts[i].id, 1, \\\"0x\\\");\\r\\n            }\\r\\n\\r\\n            bannerData[tokenId].parts[i] = parts[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Updates banner with specified parameters\\r\\n    /// @param tokenId banner token id which will be updated, old banner parts, if replaced, will be refunded to the owner\\r\\n    /// @param name New banner name\\r\\n    /// @param parts New banner parts\\r\\n    /// @param data Banner custom parameters\\r\\n    function updateBanner(\\r\\n        uint256 tokenId,\\r\\n        string calldata name,\\r\\n        Part[16] memory parts,\\r\\n        bytes memory data\\r\\n    ) public {\\r\\n        require(msg.sender == ownerOf(tokenId), \\\"token is not belongs to caller\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < parts.length; i++) {\\r\\n            if (parts[i].addr == bannerData[tokenId].parts[i].addr && parts[i].id == bannerData[tokenId].parts[i].id) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            //try 721\\r\\n            if (parts[i].addr != address(0)) {\\r\\n                try IERC721(parts[i].addr).safeTransferFrom(msg.sender, address(this), parts[i].id) {} catch (\\r\\n                    bytes memory /*lowLevelData*/\\r\\n                ) {\\r\\n                    IERC1155(parts[i].addr).safeTransferFrom(msg.sender, address(this), parts[i].id, 1, \\\"0x\\\");\\r\\n                }\\r\\n            }\\r\\n\\r\\n            //withdraw previous nft\\r\\n            if (bannerData[tokenId].parts[i].addr != address(0)) {\\r\\n                try\\r\\n                    IERC721(bannerData[tokenId].parts[i].addr).safeTransferFrom(\\r\\n                        address(this),\\r\\n                        msg.sender,\\r\\n                        bannerData[tokenId].parts[i].id\\r\\n                    )\\r\\n                {} catch (\\r\\n                    bytes memory /*lowLevelData*/\\r\\n                ) {\\r\\n                    IERC1155(bannerData[tokenId].parts[i].addr).safeTransferFrom(\\r\\n                        address(this),\\r\\n                        msg.sender,\\r\\n                        bannerData[tokenId].parts[i].id,\\r\\n                        1,\\r\\n                        \\\"0x\\\"\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n\\r\\n            bannerData[tokenId].parts[i] = parts[i];\\r\\n        }\\r\\n\\r\\n        bannerData[tokenId].name = name;\\r\\n        bannerData[tokenId].data = data;\\r\\n        emit BannerUpdated(tokenId, name, parts, data);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe89b32488e99c8e2d23bf99edf06519eebf31940e520e3d2246bc36bf06dbc31\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000600d553480156200001657600080fd5b50604051620034c7380380620034c78339810160408190526200003991620001a8565b82826000620000498382620002c8565b506001620000588282620002c8565b505050620000756200006f6200008d60201b60201c565b62000091565b600c620000838282620002c8565b5050505062000394565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200010b57600080fd5b81516001600160401b0380821115620001285762000128620000e3565b604051601f8301601f19908116603f01168101908282118183101715620001535762000153620000e3565b816040528381526020925086838588010111156200017057600080fd5b600091505b8382101562000194578582018301518183018401529082019062000175565b600093810190920192909252949350505050565b600080600060608486031215620001be57600080fd5b83516001600160401b0380821115620001d657600080fd5b620001e487838801620000f9565b94506020860151915080821115620001fb57600080fd5b6200020987838801620000f9565b935060408601519150808211156200022057600080fd5b506200022f86828701620000f9565b9150509250925092565b600181811c908216806200024e57607f821691505b6020821081036200026f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002c357600081815260208120601f850160051c810160208610156200029e5750805b601f850160051c820191505b81811015620002bf57828155600101620002aa565b5050505b505050565b81516001600160401b03811115620002e457620002e4620000e3565b620002fc81620002f5845462000239565b8462000275565b602080601f8311600181146200033457600084156200031b5750858301515b600019600386901b1c1916600185901b178555620002bf565b600085815260208120601f198616915b82811015620003655788860151825594840194600190910190840162000344565b5085821015620003845787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61312380620003a46000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80638c8add3a11610104578063bc197c81116100a2578063e985e9c511610071578063e985e9c51461040f578063f23a6e611461044b578063f2fde38b1461046b578063f84ddf0b1461047e57600080fd5b8063bc197c811461038c578063be0c5c63146103c7578063c30f4a5a146103e9578063c87b56dd146103fc57600080fd5b8063a22cb465116100de578063a22cb46514610340578063a6a5300914610353578063b64a109714610366578063b88d4fde1461037957600080fd5b80638c8add3a146103065780638da5cb5b1461032757806395d89b411461033857600080fd5b806342842e0e116101715780636c0360eb1161014b5780636c0360eb146102c257806370a08231146102ca578063715018a6146102dd57806389c74e9e146102e557600080fd5b806342842e0e146102895780634f6ccce71461029c5780636352211e146102af57600080fd5b8063095ea7b3116101ad578063095ea7b31461023c57806318160ddd1461025157806323b872dd146102635780632f745c591461027657600080fd5b806301ffc9a7146101d457806306fdde03146101fc578063081812fc14610211575b600080fd5b6101e76101e2366004612464565b610487565b60405190151581526020015b60405180910390f35b6102046104a7565b6040516101f391906124d1565b61022461021f3660046124e4565b610539565b6040516001600160a01b0390911681526020016101f3565b61024f61024a366004612519565b610560565b005b6008545b6040519081526020016101f3565b61024f610271366004612543565b61067a565b610255610284366004612519565b6106ab565b61024f610297366004612543565b610741565b6102556102aa3660046124e4565b61075c565b6102246102bd3660046124e4565b6107ef565b61020461084f565b6102556102d836600461257f565b6108dd565b61024f610963565b6102f86102f33660046124e4565b610977565b6040516101f392919061259a565b61031961031436600461257f565b610aa3565b6040516101f3929190612600565b600a546001600160a01b0316610224565b610204610d63565b61024f61034e3660046126d3565b610d72565b61024f6103613660046128ca565b610d81565b61024f610374366004612954565b611326565b61024f6103873660046129d4565b6113d7565b6103ae61039a366004612a75565b63bc197c8160e01b98975050505050505050565b6040516001600160e01b031990911681526020016101f3565b6103da6103d53660046124e4565b61140f565b6040516101f393929190612b30565b61024f6103f7366004612b70565b6115b9565b61020461040a3660046124e4565b6115cd565b6101e761041d366004612bb9565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6103ae610459366004612bec565b63f23a6e6160e01b9695505050505050565b61024f61047936600461257f565b611634565b610255600d5481565b6000610492826116ad565b806104a157506104a1826116d2565b92915050565b6060600080546104b690612c64565b80601f01602080910402602001604051908101604052809291908181526020018280546104e290612c64565b801561052f5780601f106105045761010080835404028352916020019161052f565b820191906000526020600020905b81548152906001019060200180831161051257829003601f168201915b5050505050905090565b6000610544826116f7565b506000908152600460205260409020546001600160a01b031690565b600061056b826107ef565b9050806001600160a01b0316836001600160a01b0316036105dd5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806105f957506105f9813361041d565b61066b5760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060648201526084016105d4565b6106758383611756565b505050565b61068433826117c4565b6106a05760405162461bcd60e51b81526004016105d490612c9e565b610675838383611843565b60006106b6836108dd565b82106107185760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016105d4565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b610675838383604051806020016040528060008152506113d7565b600061076760085490565b82106107ca5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016105d4565b600882815481106107dd576107dd612cec565b90600052602060002001549050919050565b6000818152600260205260408120546001600160a01b0316806104a15760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016105d4565b600c805461085c90612c64565b80601f016020809104026020016040519081016040528092919081815260200182805461088890612c64565b80156108d55780601f106108aa576101008083540402835291602001916108d5565b820191906000526020600020905b8154815290600101906020018083116108b857829003601f168201915b505050505081565b60006001600160a01b0382166109475760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016105d4565b506001600160a01b031660009081526003602052604090205490565b61096b6119ea565b6109756000611a44565b565b600b6020526000908152604090208054819061099290612c64565b80601f01602080910402602001604051908101604052809291908181526020018280546109be90612c64565b8015610a0b5780601f106109e057610100808354040283529160200191610a0b565b820191906000526020600020905b8154815290600101906020018083116109ee57829003601f168201915b505050505090806021018054610a2090612c64565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4c90612c64565b8015610a995780601f10610a6e57610100808354040283529160200191610a99565b820191906000526020600020905b815481529060010190602001808311610a7c57829003601f168201915b5050505050905082565b6060806000610ab1846108dd565b90508067ffffffffffffffff811115610acc57610acc612758565b604051908082528060200260200182016040528015610b0557816020015b610af26123ed565b815260200190600190039081610aea5790505b5091508067ffffffffffffffff811115610b2157610b21612758565b604051908082528060200260200182016040528015610b4a578160200160208202803683370190505b50925060005b81811015610d5c576000610b6486836106ab565b905080858381518110610b7957610b79612cec565b602002602001018181525050600b6000828152602001908152602001600020604051806060016040529081600082018054610bb390612c64565b80601f0160208091040260200160405190810160405280929190818152602001828054610bdf90612c64565b8015610c2c5780601f10610c0157610100808354040283529160200191610c2c565b820191906000526020600020905b815481529060010190602001808311610c0f57829003601f168201915b50505091835250506040805161020081019091526020909101906001830160106000835b82821015610c91576040805180820190915260028302850180546001600160a01b031682526001908101546020808401919091529183529092019101610c50565b505050508152602001602182018054610ca990612c64565b80601f0160208091040260200160405190810160405280929190818152602001828054610cd590612c64565b8015610d225780601f10610cf757610100808354040283529160200191610d22565b820191906000526020600020905b815481529060010190602001808311610d0557829003601f168201915b505050505081525050848381518110610d3d57610d3d612cec565b6020026020010181905250508080610d5490612d18565b915050610b50565b5050915091565b6060600180546104b690612c64565b610d7d338383611a96565b5050565b610d8a856107ef565b6001600160a01b0316336001600160a01b031614610dea5760405162461bcd60e51b815260206004820152601e60248201527f746f6b656e206973206e6f742062656c6f6e677320746f2063616c6c6572000060448201526064016105d4565b60005b60108110156112a9576000868152600b602052604090206001018160108110610e1857610e18612cec565b60020201546001600160a01b0316838260108110610e3857610e38612cec565b6020020151516001600160a01b0316148015610e9657506000868152600b602052604090206001018160108110610e7157610e71612cec565b6002020160010154838260108110610e8b57610e8b612cec565b602002015160200151145b611297576000838260108110610eae57610eae612cec565b6020020151516001600160a01b03161461103457828160108110610ed457610ed4612cec565b6020020151516001600160a01b03166342842e0e3330868560108110610efc57610efc612cec565b6020908102919091015101516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b158015610f5757600080fd5b505af1925050508015610f68575060015b611034573d808015610f96576040519150601f19603f3d011682016040523d82523d6000602084013e610f9b565b606091505b50838260108110610fae57610fae612cec565b6020020151516001600160a01b031663f242432a3330878660108110610fd657610fd6612cec565b60200201516020015160016040518563ffffffff1660e01b81526004016110009493929190612d31565b600060405180830381600087803b15801561101a57600080fd5b505af115801561102e573d6000803e3d6000fd5b50505050505b6000868152600b60205260408120600101826010811061105657611056612cec565b60020201546001600160a01b031614611223576000868152600b60205260409020600101816010811061108b5761108b612cec565b60020201546000878152600b602052604090206001600160a01b03909116906342842e0e903090339060010185601081106110c8576110c8612cec565b600202016001015460405160e085901b6001600160e01b03191681526001600160a01b0393841660048201529190921660248201526044810191909152606401600060405180830381600087803b15801561112257600080fd5b505af1925050508015611133575060015b611223573d808015611161576040519150601f19603f3d011682016040523d82523d6000602084013e611166565b606091505b506000878152600b60205260409020600101826010811061118957611189612cec565b60020201546000888152600b602052604090206001600160a01b039091169063f242432a903090339060010186601081106111c6576111c6612cec565b600202016001015460016040518563ffffffff1660e01b81526004016111ef9493929190612d31565b600060405180830381600087803b15801561120957600080fd5b505af115801561121d573d6000803e3d6000fd5b50505050505b82816010811061123557611235612cec565b6020020151600b6000888152602001908152602001600020600101826010811061126157611261612cec565b82516002919091029190910180546001600160a01b0319166001600160a01b039092169190911781556020909101516001909101555b806112a181612d18565b915050610ded565b506000858152600b602052604090206112c3848683612dc2565b506000858152600b602052604090206021016112df8282612e83565b507fc5af4baabe0b43f9c9e905f83dd1191768ee8fd60b73a30fc23fceedce7eb3968585858585604051611317959493929190612f43565b60405180910390a15050505050565b600d805490600061133683612d18565b9091555050600d546000908152600b60205260409020611357848683612dc2565b50600d546000908152600b602052604090206021016113768282612e83565b50611383600d5483611b64565b61139033600d5483611d90565b7f080569b8ffab66e0cf0ce565f2e83d85ee8d93f246397f4ee4e7e6908fdc4c5f600d54858585856040516113c9959493929190612f43565b60405180910390a150505050565b6113e133836117c4565b6113fd5760405162461bcd60e51b81526004016105d490612c9e565b61140984848484611dc3565b50505050565b6060611419612414565b6000838152600b6020526040902080546060919060018201906021830190839061144290612c64565b80601f016020809104026020016040519081016040528092919081815260200182805461146e90612c64565b80156114bb5780601f10611490576101008083540402835291602001916114bb565b820191906000526020600020905b81548152906001019060200180831161149e57829003601f168201915b50506040805161020081019091529396508592506010915060009050835b8282101561151a576040805180820190915260028302850180546001600160a01b0316825260019081015460208084019190915291835290920191016114d9565b50505050915080805461152c90612c64565b80601f016020809104026020016040519081016040528092919081815260200182805461155890612c64565b80156115a55780601f1061157a576101008083540402835291602001916115a5565b820191906000526020600020905b81548152906001019060200180831161158857829003601f168201915b505050505090509250925092509193909250565b6115c16119ea565b600c610d7d8282612e83565b60606115d8826116f7565b60006115e2611df6565b90506000815111611602576040518060200160405280600081525061162d565b8061160c84611e05565b60405160200161161d929190612fa3565b6040516020818303038152906040525b9392505050565b61163c6119ea565b6001600160a01b0381166116a15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105d4565b6116aa81611a44565b50565b60006001600160e01b0319821663780e9d6360e01b14806104a157506104a182611f06565b60006001600160e01b03198216630271189760e51b14806104a157506104a1826116ad565b6000818152600260205260409020546001600160a01b03166116aa5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016105d4565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061178b826107ef565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806117d0836107ef565b9050806001600160a01b0316846001600160a01b0316148061181757506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b8061183b5750836001600160a01b031661183084610539565b6001600160a01b0316145b949350505050565b826001600160a01b0316611856826107ef565b6001600160a01b0316146118ba5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016105d4565b6001600160a01b03821661191c5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016105d4565b611927838383611f56565b611932600082611756565b6001600160a01b038316600090815260036020526040812080546001929061195b908490612fd2565b90915550506001600160a01b0382166000908152600360205260408120805460019290611989908490612fe5565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600a546001600160a01b031633146109755760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105d4565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031603611af75760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016105d4565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60005b6010811015610675576000828260108110611b8457611b84612cec565b6020020151516001600160a01b031614611d7e57818160108110611baa57611baa612cec565b6020020151516001600160a01b03166342842e0e3330858560108110611bd257611bd2612cec565b6020908102919091015101516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b158015611c2d57600080fd5b505af1925050508015611c3e575060015b611d0a573d808015611c6c576040519150601f19603f3d011682016040523d82523d6000602084013e611c71565b606091505b50828260108110611c8457611c84612cec565b6020020151516001600160a01b031663f242432a3330868660108110611cac57611cac612cec565b60200201516020015160016040518563ffffffff1660e01b8152600401611cd69493929190612d31565b600060405180830381600087803b158015611cf057600080fd5b505af1158015611d04573d6000803e3d6000fd5b50505050505b818160108110611d1c57611d1c612cec565b6020020151600b60008581526020019081526020016000206001018260108110611d4857611d48612cec565b82516002919091029190910180546001600160a01b0319166001600160a01b039092169190911781556020909101516001909101555b80611d8881612d18565b915050611b67565b611d9a838361200e565b611da7600084848461215c565b6106755760405162461bcd60e51b81526004016105d490612ff8565b611dce848484611843565b611dda8484848461215c565b6114095760405162461bcd60e51b81526004016105d490612ff8565b6060600c80546104b690612c64565b606081600003611e2c5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611e565780611e4081612d18565b9150611e4f9050600a83613060565b9150611e30565b60008167ffffffffffffffff811115611e7157611e71612758565b6040519080825280601f01601f191660200182016040528015611e9b576020820181803683370190505b5090505b841561183b57611eb0600183612fd2565b9150611ebd600a86613074565b611ec8906030612fe5565b60f81b818381518110611edd57611edd612cec565b60200101906001600160f81b031916908160001a905350611eff600a86613060565b9450611e9f565b60006001600160e01b031982166380ac58cd60e01b1480611f3757506001600160e01b03198216635b5e139f60e01b145b806104a157506301ffc9a760e01b6001600160e01b03198316146104a1565b6001600160a01b038316611fb157611fac81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b611fd4565b816001600160a01b0316836001600160a01b031614611fd457611fd4838261225d565b6001600160a01b038216611feb57610675816122fa565b826001600160a01b0316826001600160a01b0316146106755761067582826123a9565b6001600160a01b0382166120645760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016105d4565b6000818152600260205260409020546001600160a01b0316156120c95760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016105d4565b6120d560008383611f56565b6001600160a01b03821660009081526003602052604081208054600192906120fe908490612fe5565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b1561225257604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906121a0903390899088908890600401613088565b6020604051808303816000875af19250505080156121db575060408051601f3d908101601f191682019092526121d8918101906130ba565b60015b612238573d808015612209576040519150601f19603f3d011682016040523d82523d6000602084013e61220e565b606091505b5080516000036122305760405162461bcd60e51b81526004016105d490612ff8565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061183b565b506001949350505050565b6000600161226a846108dd565b6122749190612fd2565b6000838152600760205260409020549091508082146122c7576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061230c90600190612fd2565b6000838152600960205260408120546008805493945090928490811061233457612334612cec565b90600052602060002001549050806008838154811061235557612355612cec565b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061238d5761238d6130d7565b6001900381819060005260206000200160009055905550505050565b60006123b4836108dd565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b604051806060016040528060608152602001612407612414565b8152602001606081525090565b6040518061020001604052806010905b60408051808201909152600080825260208201528152602001906001900390816124245790505090565b6001600160e01b0319811681146116aa57600080fd5b60006020828403121561247657600080fd5b813561162d8161244e565b60005b8381101561249c578181015183820152602001612484565b50506000910152565b600081518084526124bd816020860160208601612481565b601f01601f19169290920160200192915050565b60208152600061162d60208301846124a5565b6000602082840312156124f657600080fd5b5035919050565b80356001600160a01b038116811461251457600080fd5b919050565b6000806040838503121561252c57600080fd5b612535836124fd565b946020939093013593505050565b60008060006060848603121561255857600080fd5b612561846124fd565b925061256f602085016124fd565b9150604084013590509250925092565b60006020828403121561259157600080fd5b61162d826124fd565b6040815260006125ad60408301856124a5565b82810360208401526125bf81856124a5565b95945050505050565b8060005b601081101561140957815180516001600160a01b0316855260209081015181860152604090940193909101906001016125cc565b60408082528351828201819052600091906020906060850190828801855b8281101561263a5781518452928401929084019060010161261e565b50505084810382860152855180825282820190600581901b8301840188850160005b838110156126c357601f1986840301855281516104408151818652612683828701826124a5565b915050888201516126968a8701826125c8565b5090890151848203610420860152906126af81836124a5565b96890196945050509086019060010161265c565b50909a9950505050505050505050565b600080604083850312156126e657600080fd5b6126ef836124fd565b91506020830135801515811461270457600080fd5b809150509250929050565b60008083601f84011261272157600080fd5b50813567ffffffffffffffff81111561273957600080fd5b60208301915083602082850101111561275157600080fd5b9250929050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561279157612791612758565b60405290565b600082601f8301126127a857600080fd5b60408051610200810181811067ffffffffffffffff821117156127cd576127cd612758565b8252806104008501868111156127e257600080fd5b855b81811015612828578481890312156127fc5760008081fd5b61280461276e565b61280d826124fd565b815260208281013581830152908452929092019184016127e4565b50919695505050505050565b600067ffffffffffffffff8084111561284f5761284f612758565b604051601f8501601f19908116603f0116810190828211818310171561287757612877612758565b8160405280935085815286868601111561289057600080fd5b858560208301376000602087830101525050509392505050565b600082601f8301126128bb57600080fd5b61162d83833560208501612834565b600080600080600061046086880312156128e357600080fd5b85359450602086013567ffffffffffffffff8082111561290257600080fd5b61290e89838a0161270f565b90965094508491506129238960408a01612797565b935061044088013591508082111561293a57600080fd5b50612947888289016128aa565b9150509295509295909350565b600080600080610440858703121561296b57600080fd5b843567ffffffffffffffff8082111561298357600080fd5b61298f8883890161270f565b90965094508491506129a48860208901612797565b93506104208701359150808211156129bb57600080fd5b506129c8878288016128aa565b91505092959194509250565b600080600080608085870312156129ea57600080fd5b6129f3856124fd565b9350612a01602086016124fd565b925060408501359150606085013567ffffffffffffffff811115612a2457600080fd5b6129c8878288016128aa565b60008083601f840112612a4257600080fd5b50813567ffffffffffffffff811115612a5a57600080fd5b6020830191508360208260051b850101111561275157600080fd5b60008060008060008060008060a0898b031215612a9157600080fd5b612a9a896124fd565b9750612aa860208a016124fd565b9650604089013567ffffffffffffffff80821115612ac557600080fd5b612ad18c838d01612a30565b909850965060608b0135915080821115612aea57600080fd5b612af68c838d01612a30565b909650945060808b0135915080821115612b0f57600080fd5b50612b1c8b828c0161270f565b999c989b5096995094979396929594505050565b6000610440808352612b44818401876124a5565b9050612b5360208401866125c8565b828103610420840152612b6681856124a5565b9695505050505050565b600060208284031215612b8257600080fd5b813567ffffffffffffffff811115612b9957600080fd5b8201601f81018413612baa57600080fd5b61183b84823560208401612834565b60008060408385031215612bcc57600080fd5b612bd5836124fd565b9150612be3602084016124fd565b90509250929050565b60008060008060008060a08789031215612c0557600080fd5b612c0e876124fd565b9550612c1c602088016124fd565b94506040870135935060608701359250608087013567ffffffffffffffff811115612c4657600080fd5b612c5289828a0161270f565b979a9699509497509295939492505050565b600181811c90821680612c7857607f821691505b602082108103612c9857634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612d2a57612d2a612d02565b5060010190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260029082015261060f60f31b60c082015260e00190565b601f82111561067557600081815260208120601f850160051c81016020861015612d9b5750805b601f850160051c820191505b81811015612dba57828155600101612da7565b505050505050565b67ffffffffffffffff831115612dda57612dda612758565b612dee83612de88354612c64565b83612d74565b6000601f841160018114612e225760008515612e0a5750838201355b600019600387901b1c1916600186901b178355612e7c565b600083815260209020601f19861690835b82811015612e535786850135825560209485019460019092019101612e33565b5086821015612e705760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b815167ffffffffffffffff811115612e9d57612e9d612758565b612eb181612eab8454612c64565b84612d74565b602080601f831160018114612ee65760008415612ece5750858301515b600019600386901b1c1916600185901b178555612dba565b600085815260208120601f198616915b82811015612f1557888601518255948401946001909101908401612ef6565b5085821015612f335787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006104608783528060208401528581840152506104808587828501376000838701820152601f8601601f19168301612f7f60408501876125c8565b8184820301610440850152612f96828201866124a5565b9998505050505050505050565b60008351612fb5818460208801612481565b835190830190612fc9818360208801612481565b01949350505050565b818103818111156104a1576104a1612d02565b808201808211156104a1576104a1612d02565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b60008261306f5761306f61304a565b500490565b6000826130835761308361304a565b500690565b60006001600160a01b03808716835280861660208401525083604083015260806060830152612b6660808301846124a5565b6000602082840312156130cc57600080fd5b815161162d8161244e565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220545131c8d16c17495d1e0f8bb3a59959c5435e705c6af17db4ccc182227b39a064736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c80638c8add3a11610104578063bc197c81116100a2578063e985e9c511610071578063e985e9c51461040f578063f23a6e611461044b578063f2fde38b1461046b578063f84ddf0b1461047e57600080fd5b8063bc197c811461038c578063be0c5c63146103c7578063c30f4a5a146103e9578063c87b56dd146103fc57600080fd5b8063a22cb465116100de578063a22cb46514610340578063a6a5300914610353578063b64a109714610366578063b88d4fde1461037957600080fd5b80638c8add3a146103065780638da5cb5b1461032757806395d89b411461033857600080fd5b806342842e0e116101715780636c0360eb1161014b5780636c0360eb146102c257806370a08231146102ca578063715018a6146102dd57806389c74e9e146102e557600080fd5b806342842e0e146102895780634f6ccce71461029c5780636352211e146102af57600080fd5b8063095ea7b3116101ad578063095ea7b31461023c57806318160ddd1461025157806323b872dd146102635780632f745c591461027657600080fd5b806301ffc9a7146101d457806306fdde03146101fc578063081812fc14610211575b600080fd5b6101e76101e2366004612464565b610487565b60405190151581526020015b60405180910390f35b6102046104a7565b6040516101f391906124d1565b61022461021f3660046124e4565b610539565b6040516001600160a01b0390911681526020016101f3565b61024f61024a366004612519565b610560565b005b6008545b6040519081526020016101f3565b61024f610271366004612543565b61067a565b610255610284366004612519565b6106ab565b61024f610297366004612543565b610741565b6102556102aa3660046124e4565b61075c565b6102246102bd3660046124e4565b6107ef565b61020461084f565b6102556102d836600461257f565b6108dd565b61024f610963565b6102f86102f33660046124e4565b610977565b6040516101f392919061259a565b61031961031436600461257f565b610aa3565b6040516101f3929190612600565b600a546001600160a01b0316610224565b610204610d63565b61024f61034e3660046126d3565b610d72565b61024f6103613660046128ca565b610d81565b61024f610374366004612954565b611326565b61024f6103873660046129d4565b6113d7565b6103ae61039a366004612a75565b63bc197c8160e01b98975050505050505050565b6040516001600160e01b031990911681526020016101f3565b6103da6103d53660046124e4565b61140f565b6040516101f393929190612b30565b61024f6103f7366004612b70565b6115b9565b61020461040a3660046124e4565b6115cd565b6101e761041d366004612bb9565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6103ae610459366004612bec565b63f23a6e6160e01b9695505050505050565b61024f61047936600461257f565b611634565b610255600d5481565b6000610492826116ad565b806104a157506104a1826116d2565b92915050565b6060600080546104b690612c64565b80601f01602080910402602001604051908101604052809291908181526020018280546104e290612c64565b801561052f5780601f106105045761010080835404028352916020019161052f565b820191906000526020600020905b81548152906001019060200180831161051257829003601f168201915b5050505050905090565b6000610544826116f7565b506000908152600460205260409020546001600160a01b031690565b600061056b826107ef565b9050806001600160a01b0316836001600160a01b0316036105dd5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806105f957506105f9813361041d565b61066b5760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060648201526084016105d4565b6106758383611756565b505050565b61068433826117c4565b6106a05760405162461bcd60e51b81526004016105d490612c9e565b610675838383611843565b60006106b6836108dd565b82106107185760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016105d4565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b610675838383604051806020016040528060008152506113d7565b600061076760085490565b82106107ca5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016105d4565b600882815481106107dd576107dd612cec565b90600052602060002001549050919050565b6000818152600260205260408120546001600160a01b0316806104a15760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016105d4565b600c805461085c90612c64565b80601f016020809104026020016040519081016040528092919081815260200182805461088890612c64565b80156108d55780601f106108aa576101008083540402835291602001916108d5565b820191906000526020600020905b8154815290600101906020018083116108b857829003601f168201915b505050505081565b60006001600160a01b0382166109475760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016105d4565b506001600160a01b031660009081526003602052604090205490565b61096b6119ea565b6109756000611a44565b565b600b6020526000908152604090208054819061099290612c64565b80601f01602080910402602001604051908101604052809291908181526020018280546109be90612c64565b8015610a0b5780601f106109e057610100808354040283529160200191610a0b565b820191906000526020600020905b8154815290600101906020018083116109ee57829003601f168201915b505050505090806021018054610a2090612c64565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4c90612c64565b8015610a995780601f10610a6e57610100808354040283529160200191610a99565b820191906000526020600020905b815481529060010190602001808311610a7c57829003601f168201915b5050505050905082565b6060806000610ab1846108dd565b90508067ffffffffffffffff811115610acc57610acc612758565b604051908082528060200260200182016040528015610b0557816020015b610af26123ed565b815260200190600190039081610aea5790505b5091508067ffffffffffffffff811115610b2157610b21612758565b604051908082528060200260200182016040528015610b4a578160200160208202803683370190505b50925060005b81811015610d5c576000610b6486836106ab565b905080858381518110610b7957610b79612cec565b602002602001018181525050600b6000828152602001908152602001600020604051806060016040529081600082018054610bb390612c64565b80601f0160208091040260200160405190810160405280929190818152602001828054610bdf90612c64565b8015610c2c5780601f10610c0157610100808354040283529160200191610c2c565b820191906000526020600020905b815481529060010190602001808311610c0f57829003601f168201915b50505091835250506040805161020081019091526020909101906001830160106000835b82821015610c91576040805180820190915260028302850180546001600160a01b031682526001908101546020808401919091529183529092019101610c50565b505050508152602001602182018054610ca990612c64565b80601f0160208091040260200160405190810160405280929190818152602001828054610cd590612c64565b8015610d225780601f10610cf757610100808354040283529160200191610d22565b820191906000526020600020905b815481529060010190602001808311610d0557829003601f168201915b505050505081525050848381518110610d3d57610d3d612cec565b6020026020010181905250508080610d5490612d18565b915050610b50565b5050915091565b6060600180546104b690612c64565b610d7d338383611a96565b5050565b610d8a856107ef565b6001600160a01b0316336001600160a01b031614610dea5760405162461bcd60e51b815260206004820152601e60248201527f746f6b656e206973206e6f742062656c6f6e677320746f2063616c6c6572000060448201526064016105d4565b60005b60108110156112a9576000868152600b602052604090206001018160108110610e1857610e18612cec565b60020201546001600160a01b0316838260108110610e3857610e38612cec565b6020020151516001600160a01b0316148015610e9657506000868152600b602052604090206001018160108110610e7157610e71612cec565b6002020160010154838260108110610e8b57610e8b612cec565b602002015160200151145b611297576000838260108110610eae57610eae612cec565b6020020151516001600160a01b03161461103457828160108110610ed457610ed4612cec565b6020020151516001600160a01b03166342842e0e3330868560108110610efc57610efc612cec565b6020908102919091015101516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b158015610f5757600080fd5b505af1925050508015610f68575060015b611034573d808015610f96576040519150601f19603f3d011682016040523d82523d6000602084013e610f9b565b606091505b50838260108110610fae57610fae612cec565b6020020151516001600160a01b031663f242432a3330878660108110610fd657610fd6612cec565b60200201516020015160016040518563ffffffff1660e01b81526004016110009493929190612d31565b600060405180830381600087803b15801561101a57600080fd5b505af115801561102e573d6000803e3d6000fd5b50505050505b6000868152600b60205260408120600101826010811061105657611056612cec565b60020201546001600160a01b031614611223576000868152600b60205260409020600101816010811061108b5761108b612cec565b60020201546000878152600b602052604090206001600160a01b03909116906342842e0e903090339060010185601081106110c8576110c8612cec565b600202016001015460405160e085901b6001600160e01b03191681526001600160a01b0393841660048201529190921660248201526044810191909152606401600060405180830381600087803b15801561112257600080fd5b505af1925050508015611133575060015b611223573d808015611161576040519150601f19603f3d011682016040523d82523d6000602084013e611166565b606091505b506000878152600b60205260409020600101826010811061118957611189612cec565b60020201546000888152600b602052604090206001600160a01b039091169063f242432a903090339060010186601081106111c6576111c6612cec565b600202016001015460016040518563ffffffff1660e01b81526004016111ef9493929190612d31565b600060405180830381600087803b15801561120957600080fd5b505af115801561121d573d6000803e3d6000fd5b50505050505b82816010811061123557611235612cec565b6020020151600b6000888152602001908152602001600020600101826010811061126157611261612cec565b82516002919091029190910180546001600160a01b0319166001600160a01b039092169190911781556020909101516001909101555b806112a181612d18565b915050610ded565b506000858152600b602052604090206112c3848683612dc2565b506000858152600b602052604090206021016112df8282612e83565b507fc5af4baabe0b43f9c9e905f83dd1191768ee8fd60b73a30fc23fceedce7eb3968585858585604051611317959493929190612f43565b60405180910390a15050505050565b600d805490600061133683612d18565b9091555050600d546000908152600b60205260409020611357848683612dc2565b50600d546000908152600b602052604090206021016113768282612e83565b50611383600d5483611b64565b61139033600d5483611d90565b7f080569b8ffab66e0cf0ce565f2e83d85ee8d93f246397f4ee4e7e6908fdc4c5f600d54858585856040516113c9959493929190612f43565b60405180910390a150505050565b6113e133836117c4565b6113fd5760405162461bcd60e51b81526004016105d490612c9e565b61140984848484611dc3565b50505050565b6060611419612414565b6000838152600b6020526040902080546060919060018201906021830190839061144290612c64565b80601f016020809104026020016040519081016040528092919081815260200182805461146e90612c64565b80156114bb5780601f10611490576101008083540402835291602001916114bb565b820191906000526020600020905b81548152906001019060200180831161149e57829003601f168201915b50506040805161020081019091529396508592506010915060009050835b8282101561151a576040805180820190915260028302850180546001600160a01b0316825260019081015460208084019190915291835290920191016114d9565b50505050915080805461152c90612c64565b80601f016020809104026020016040519081016040528092919081815260200182805461155890612c64565b80156115a55780601f1061157a576101008083540402835291602001916115a5565b820191906000526020600020905b81548152906001019060200180831161158857829003601f168201915b505050505090509250925092509193909250565b6115c16119ea565b600c610d7d8282612e83565b60606115d8826116f7565b60006115e2611df6565b90506000815111611602576040518060200160405280600081525061162d565b8061160c84611e05565b60405160200161161d929190612fa3565b6040516020818303038152906040525b9392505050565b61163c6119ea565b6001600160a01b0381166116a15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105d4565b6116aa81611a44565b50565b60006001600160e01b0319821663780e9d6360e01b14806104a157506104a182611f06565b60006001600160e01b03198216630271189760e51b14806104a157506104a1826116ad565b6000818152600260205260409020546001600160a01b03166116aa5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016105d4565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061178b826107ef565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806117d0836107ef565b9050806001600160a01b0316846001600160a01b0316148061181757506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b8061183b5750836001600160a01b031661183084610539565b6001600160a01b0316145b949350505050565b826001600160a01b0316611856826107ef565b6001600160a01b0316146118ba5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016105d4565b6001600160a01b03821661191c5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016105d4565b611927838383611f56565b611932600082611756565b6001600160a01b038316600090815260036020526040812080546001929061195b908490612fd2565b90915550506001600160a01b0382166000908152600360205260408120805460019290611989908490612fe5565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600a546001600160a01b031633146109755760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105d4565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031603611af75760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016105d4565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60005b6010811015610675576000828260108110611b8457611b84612cec565b6020020151516001600160a01b031614611d7e57818160108110611baa57611baa612cec565b6020020151516001600160a01b03166342842e0e3330858560108110611bd257611bd2612cec565b6020908102919091015101516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b158015611c2d57600080fd5b505af1925050508015611c3e575060015b611d0a573d808015611c6c576040519150601f19603f3d011682016040523d82523d6000602084013e611c71565b606091505b50828260108110611c8457611c84612cec565b6020020151516001600160a01b031663f242432a3330868660108110611cac57611cac612cec565b60200201516020015160016040518563ffffffff1660e01b8152600401611cd69493929190612d31565b600060405180830381600087803b158015611cf057600080fd5b505af1158015611d04573d6000803e3d6000fd5b50505050505b818160108110611d1c57611d1c612cec565b6020020151600b60008581526020019081526020016000206001018260108110611d4857611d48612cec565b82516002919091029190910180546001600160a01b0319166001600160a01b039092169190911781556020909101516001909101555b80611d8881612d18565b915050611b67565b611d9a838361200e565b611da7600084848461215c565b6106755760405162461bcd60e51b81526004016105d490612ff8565b611dce848484611843565b611dda8484848461215c565b6114095760405162461bcd60e51b81526004016105d490612ff8565b6060600c80546104b690612c64565b606081600003611e2c5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611e565780611e4081612d18565b9150611e4f9050600a83613060565b9150611e30565b60008167ffffffffffffffff811115611e7157611e71612758565b6040519080825280601f01601f191660200182016040528015611e9b576020820181803683370190505b5090505b841561183b57611eb0600183612fd2565b9150611ebd600a86613074565b611ec8906030612fe5565b60f81b818381518110611edd57611edd612cec565b60200101906001600160f81b031916908160001a905350611eff600a86613060565b9450611e9f565b60006001600160e01b031982166380ac58cd60e01b1480611f3757506001600160e01b03198216635b5e139f60e01b145b806104a157506301ffc9a760e01b6001600160e01b03198316146104a1565b6001600160a01b038316611fb157611fac81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b611fd4565b816001600160a01b0316836001600160a01b031614611fd457611fd4838261225d565b6001600160a01b038216611feb57610675816122fa565b826001600160a01b0316826001600160a01b0316146106755761067582826123a9565b6001600160a01b0382166120645760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016105d4565b6000818152600260205260409020546001600160a01b0316156120c95760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016105d4565b6120d560008383611f56565b6001600160a01b03821660009081526003602052604081208054600192906120fe908490612fe5565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b1561225257604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906121a0903390899088908890600401613088565b6020604051808303816000875af19250505080156121db575060408051601f3d908101601f191682019092526121d8918101906130ba565b60015b612238573d808015612209576040519150601f19603f3d011682016040523d82523d6000602084013e61220e565b606091505b5080516000036122305760405162461bcd60e51b81526004016105d490612ff8565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061183b565b506001949350505050565b6000600161226a846108dd565b6122749190612fd2565b6000838152600760205260409020549091508082146122c7576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061230c90600190612fd2565b6000838152600960205260408120546008805493945090928490811061233457612334612cec565b90600052602060002001549050806008838154811061235557612355612cec565b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061238d5761238d6130d7565b6001900381819060005260206000200160009055905550505050565b60006123b4836108dd565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b604051806060016040528060608152602001612407612414565b8152602001606081525090565b6040518061020001604052806010905b60408051808201909152600080825260208201528152602001906001900390816124245790505090565b6001600160e01b0319811681146116aa57600080fd5b60006020828403121561247657600080fd5b813561162d8161244e565b60005b8381101561249c578181015183820152602001612484565b50506000910152565b600081518084526124bd816020860160208601612481565b601f01601f19169290920160200192915050565b60208152600061162d60208301846124a5565b6000602082840312156124f657600080fd5b5035919050565b80356001600160a01b038116811461251457600080fd5b919050565b6000806040838503121561252c57600080fd5b612535836124fd565b946020939093013593505050565b60008060006060848603121561255857600080fd5b612561846124fd565b925061256f602085016124fd565b9150604084013590509250925092565b60006020828403121561259157600080fd5b61162d826124fd565b6040815260006125ad60408301856124a5565b82810360208401526125bf81856124a5565b95945050505050565b8060005b601081101561140957815180516001600160a01b0316855260209081015181860152604090940193909101906001016125cc565b60408082528351828201819052600091906020906060850190828801855b8281101561263a5781518452928401929084019060010161261e565b50505084810382860152855180825282820190600581901b8301840188850160005b838110156126c357601f1986840301855281516104408151818652612683828701826124a5565b915050888201516126968a8701826125c8565b5090890151848203610420860152906126af81836124a5565b96890196945050509086019060010161265c565b50909a9950505050505050505050565b600080604083850312156126e657600080fd5b6126ef836124fd565b91506020830135801515811461270457600080fd5b809150509250929050565b60008083601f84011261272157600080fd5b50813567ffffffffffffffff81111561273957600080fd5b60208301915083602082850101111561275157600080fd5b9250929050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561279157612791612758565b60405290565b600082601f8301126127a857600080fd5b60408051610200810181811067ffffffffffffffff821117156127cd576127cd612758565b8252806104008501868111156127e257600080fd5b855b81811015612828578481890312156127fc5760008081fd5b61280461276e565b61280d826124fd565b815260208281013581830152908452929092019184016127e4565b50919695505050505050565b600067ffffffffffffffff8084111561284f5761284f612758565b604051601f8501601f19908116603f0116810190828211818310171561287757612877612758565b8160405280935085815286868601111561289057600080fd5b858560208301376000602087830101525050509392505050565b600082601f8301126128bb57600080fd5b61162d83833560208501612834565b600080600080600061046086880312156128e357600080fd5b85359450602086013567ffffffffffffffff8082111561290257600080fd5b61290e89838a0161270f565b90965094508491506129238960408a01612797565b935061044088013591508082111561293a57600080fd5b50612947888289016128aa565b9150509295509295909350565b600080600080610440858703121561296b57600080fd5b843567ffffffffffffffff8082111561298357600080fd5b61298f8883890161270f565b90965094508491506129a48860208901612797565b93506104208701359150808211156129bb57600080fd5b506129c8878288016128aa565b91505092959194509250565b600080600080608085870312156129ea57600080fd5b6129f3856124fd565b9350612a01602086016124fd565b925060408501359150606085013567ffffffffffffffff811115612a2457600080fd5b6129c8878288016128aa565b60008083601f840112612a4257600080fd5b50813567ffffffffffffffff811115612a5a57600080fd5b6020830191508360208260051b850101111561275157600080fd5b60008060008060008060008060a0898b031215612a9157600080fd5b612a9a896124fd565b9750612aa860208a016124fd565b9650604089013567ffffffffffffffff80821115612ac557600080fd5b612ad18c838d01612a30565b909850965060608b0135915080821115612aea57600080fd5b612af68c838d01612a30565b909650945060808b0135915080821115612b0f57600080fd5b50612b1c8b828c0161270f565b999c989b5096995094979396929594505050565b6000610440808352612b44818401876124a5565b9050612b5360208401866125c8565b828103610420840152612b6681856124a5565b9695505050505050565b600060208284031215612b8257600080fd5b813567ffffffffffffffff811115612b9957600080fd5b8201601f81018413612baa57600080fd5b61183b84823560208401612834565b60008060408385031215612bcc57600080fd5b612bd5836124fd565b9150612be3602084016124fd565b90509250929050565b60008060008060008060a08789031215612c0557600080fd5b612c0e876124fd565b9550612c1c602088016124fd565b94506040870135935060608701359250608087013567ffffffffffffffff811115612c4657600080fd5b612c5289828a0161270f565b979a9699509497509295939492505050565b600181811c90821680612c7857607f821691505b602082108103612c9857634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612d2a57612d2a612d02565b5060010190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260029082015261060f60f31b60c082015260e00190565b601f82111561067557600081815260208120601f850160051c81016020861015612d9b5750805b601f850160051c820191505b81811015612dba57828155600101612da7565b505050505050565b67ffffffffffffffff831115612dda57612dda612758565b612dee83612de88354612c64565b83612d74565b6000601f841160018114612e225760008515612e0a5750838201355b600019600387901b1c1916600186901b178355612e7c565b600083815260209020601f19861690835b82811015612e535786850135825560209485019460019092019101612e33565b5086821015612e705760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b815167ffffffffffffffff811115612e9d57612e9d612758565b612eb181612eab8454612c64565b84612d74565b602080601f831160018114612ee65760008415612ece5750858301515b600019600386901b1c1916600185901b178555612dba565b600085815260208120601f198616915b82811015612f1557888601518255948401946001909101908401612ef6565b5085821015612f335787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006104608783528060208401528581840152506104808587828501376000838701820152601f8601601f19168301612f7f60408501876125c8565b8184820301610440850152612f96828201866124a5565b9998505050505050505050565b60008351612fb5818460208801612481565b835190830190612fc9818360208801612481565b01949350505050565b818103818111156104a1576104a1612d02565b808201808211156104a1576104a1612d02565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b60008261306f5761306f61304a565b500490565b6000826130835761308361304a565b500690565b60006001600160a01b03808716835280861660208401525083604083015260806060830152612b6660808301846124a5565b6000602082840312156130cc57600080fd5b815161162d8161244e565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220545131c8d16c17495d1e0f8bb3a59959c5435e705c6af17db4ccc182227b39a064736f6c63430008100033",
  "devdoc": {
    "events": {
      "BannerUpdated(uint256,string,(address,uint256)[16],bytes)": {
        "params": {
          "data": "New banner custom parameters",
          "name": "New banner name",
          "parts": "New parts struct",
          "tokenIndex": "Token id which was updated"
        }
      },
      "NewBanner(uint256,string,(address,uint256)[16],bytes)": {
        "params": {
          "data": "Banner custom parameters",
          "name": "Banner name",
          "parts": "Parts struct",
          "tokenIndex": "Newly created token id"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getBannerData(uint256)": {
        "details": "Default mapping read method does not return all data",
        "params": {
          "tokenIndex": "Token index"
        },
        "returns": {
          "data": "Banner data",
          "name": "Banner name",
          "parts": "Banner parts"
        }
      },
      "getBannerDataByUserBatch(address)": {
        "details": "Used to query all nfts with their data without asking them one by one (may not work for holder with very large amount of nfts)",
        "params": {
          "holderAddress": "Holder address"
        },
        "returns": {
          "bannersData": "Banner data for every token id",
          "tokenIds": "Token ids holder owns"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mint(string,(address,uint256)[16],bytes)": {
        "details": "Specified banner parts will be taken from msg.sender",
        "params": {
          "data": "Banner custom parameters",
          "name": "Banner name",
          "parts": "Banner parts"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {
        "details": "Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81, or its own function selector).",
        "params": {
          "data": "Additional data with no specified format",
          "from": "The address which previously owned the token",
          "ids": "An array containing ids of each token being transferred (order and length must match values array)",
          "operator": "The address which initiated the batch transfer (i.e. msg.sender)",
          "values": "An array containing amounts of each token being transferred (order and length must match ids array)"
        },
        "returns": {
          "_0": "`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed"
        }
      },
      "onERC1155Received(address,address,uint256,uint256,bytes)": {
        "details": "Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61, or its own function selector).",
        "params": {
          "data": "Additional data with no specified format",
          "from": "The address which previously owned the token",
          "id": "The ID of the token being transferred",
          "operator": "The address which initiated the transfer (i.e. msg.sender)",
          "value": "The amount of tokens being transferred"
        },
        "returns": {
          "_0": "`bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateBanner(uint256,string,(address,uint256)[16],bytes)": {
        "params": {
          "data": "Banner custom parameters",
          "name": "New banner name",
          "parts": "New banner parts",
          "tokenId": "banner token id which will be updated, old banner parts, if replaced, will be refunded to the owner"
        }
      },
      "updateURI(string)": {
        "details": "Only owner can modify base token uri"
      }
    },
    "stateVariables": {
      "bannerData": {
        "details": "Updated when #updateBanner or #mint is called"
      },
      "baseURI": {
        "details": "Updated on creation or when #updateURI is called"
      },
      "lastTokenId": {
        "details": "Updated when #mint is called"
      }
    },
    "title": "Banners Nft",
    "version": 1
  },
  "userdoc": {
    "events": {
      "BannerUpdated(uint256,string,(address,uint256)[16],bytes)": {
        "notice": "Emitted when #updateBanner is called"
      },
      "NewBanner(uint256,string,(address,uint256)[16],bytes)": {
        "notice": "Emitted when #mint is called"
      }
    },
    "kind": "user",
    "methods": {
      "bannerData(uint256)": {
        "notice": "Mapping containing banner data by provided token id"
      },
      "baseURI()": {
        "notice": "Base URI for computing token uri"
      },
      "getBannerData(uint256)": {
        "notice": "Returns banner data with parts"
      },
      "getBannerDataByUserBatch(address)": {
        "notice": "Returns all nfts with their banner data for specified holder address"
      },
      "lastTokenId()": {
        "notice": "Last created token id"
      },
      "mint(string,(address,uint256)[16],bytes)": {
        "notice": "Mints banner with specified parameters"
      },
      "updateBanner(uint256,string,(address,uint256)[16],bytes)": {
        "notice": "Updates banner with specified parameters"
      },
      "updateURI(string)": {
        "notice": "Updates base token uri"
      }
    },
    "notice": "Acts as ERC721 Nft token, which supports ERC721 and ERC1155 parts as properties of every banner nft",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2497,
        "contract": "contracts/banners/Banners.sol:Banners",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 2499,
        "contract": "contracts/banners/Banners.sol:Banners",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2503,
        "contract": "contracts/banners/Banners.sol:Banners",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2507,
        "contract": "contracts/banners/Banners.sol:Banners",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2511,
        "contract": "contracts/banners/Banners.sol:Banners",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2517,
        "contract": "contracts/banners/Banners.sol:Banners",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3487,
        "contract": "contracts/banners/Banners.sol:Banners",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 3491,
        "contract": "contracts/banners/Banners.sol:Banners",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3494,
        "contract": "contracts/banners/Banners.sol:Banners",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3498,
        "contract": "contracts/banners/Banners.sol:Banners",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/banners/Banners.sol:Banners",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 6375,
        "contract": "contracts/banners/Banners.sol:Banners",
        "label": "bannerData",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(BannerData)6369_storage)"
      },
      {
        "astId": 6378,
        "contract": "contracts/banners/Banners.sol:Banners",
        "label": "baseURI",
        "offset": 0,
        "slot": "12",
        "type": "t_string_storage"
      },
      {
        "astId": 6382,
        "contract": "contracts/banners/Banners.sol:Banners",
        "label": "lastTokenId",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Part)6359_storage)16_storage": {
        "base": "t_struct(Part)6359_storage",
        "encoding": "inplace",
        "label": "struct Banners.Part[16]",
        "numberOfBytes": "1024"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(BannerData)6369_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Banners.BannerData)",
        "numberOfBytes": "32",
        "value": "t_struct(BannerData)6369_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(BannerData)6369_storage": {
        "encoding": "inplace",
        "label": "struct Banners.BannerData",
        "members": [
          {
            "astId": 6361,
            "contract": "contracts/banners/Banners.sol:Banners",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 6366,
            "contract": "contracts/banners/Banners.sol:Banners",
            "label": "parts",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(Part)6359_storage)16_storage"
          },
          {
            "astId": 6368,
            "contract": "contracts/banners/Banners.sol:Banners",
            "label": "data",
            "offset": 0,
            "slot": "33",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "1088"
      },
      "t_struct(Part)6359_storage": {
        "encoding": "inplace",
        "label": "struct Banners.Part",
        "members": [
          {
            "astId": 6356,
            "contract": "contracts/banners/Banners.sol:Banners",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6358,
            "contract": "contracts/banners/Banners.sol:Banners",
            "label": "id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}